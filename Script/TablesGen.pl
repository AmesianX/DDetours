# Author: Mahdi Safsafi
# https://github.com/MahdiSafsafi/delphi-detours-library

no warnings 'experimental::smartmatch';

my @legacy_ins = (
	'add',  'sub',   'adc',   'sbb',    'and',   'or',
	'xor',  'not',   'neg',   'shl',    'shr',   'jo',
	'jno',  'jb',    'jnb',   'jz',     'jnz',   'jbe',
	'jnbe', 'js',    'jns',   'jp',     'jnp',   'jl',
	'jnl',  'jle',   'jnle',  'loopne', 'loope', 'loop',
	'jmp',  'jecx',  'call',  'callf',  'ret',   'retf',
	'iret', 'enter', 'leave', 'int3',   'int',   'inc',
	'dec',  'mul',   'imul',  'div',    'idiv',  'push',
	'pop',  'pusha', 'popa',  'pushf',  'popf',  'test',
	'nop',  'xchg',  'mov',   'cmp',    'lea',   'wait',
);
open( F, 'x86.map' );
open( T, '>OpCodesTables.inc' );
print T
  "\n// https://github.com/MahdiSafsafi/delphi-detours-library\n";
print T"// Auto generated by '$0' => Do not edit ! \n\n";

print T "const\n";

sub get_sign($) {
	my $args = shift;
	my @list = split( ',', $args );
	my @sign;
	foreach (@list) {
		push( @sign, 'OPF_I64' ) if (/\(i64\)/);
		push( @sign, 'OPF_O64' ) if (/\(o64\)/);

		$_ =~ s/\(.+?\)//g;
		$_ =~ s/^\s+//;
		next if (/^\(/);
		next if (/^[0-9-a-z]/);
		next if ( uc($_) eq $_ );
		if (/\bREX/) {
			push( @sign, 'OPF_PREFIX' );
			last;
		}
		unless ( 'OPF_MODRM' ~~ @sign ) {
			push( @sign, 'OPF_MODRM' ) if (/^(C|D|E|G|M|N|Q|P|R|S|U|V|W)/);
		}
		if (/^[I,J,O,A]/) {
			if (/^([I,J,O,A][b,w,d,q,z,v,p])\s*$/) {
				push( @sign, "OPF_$1" );
			}
			else {
				die "Unkown j/imm size.";
			}
		}

	}
	my $s = join( ' or ', @sign );
	$s = 'OPF_NONE' unless ($s);
	return $s;
}
my %hash;
my @insId;
my $nsid  = 0;
my $grpid = 0;
my $prfid = 0;

sub register_ins($) {
	my $menm = shift;
	push( @insId, $menm ) unless ( $menm ~~ @insId );
}

my $table_name = '';
while (<F>) {
	chomp;
	my $line = $_;

	#exit if (/GrpTable:/);
	if (/(Grp)*Table:\s*(.+)$/) {
		$table_name = $2;
		my $max = (/^Grp/) ? 7 : 0xFF;
		undef %hash;
		for ( my $i = 0 ; $i < $max + 1 ; $i++ ) {
			my $op = sprintf( "%.2X", $i );
			$hash{$i} =
"    (INST_ID_INVALID shl \$08) or OPF_INVALID {0x$op: InvalidOpCode }";
		}
	}
	if (/EndTable/) {
		my @table;
		foreach ( sort { $a <=> $b } keys %hash ) {
			push( @table, $hash{$_} );
		}
		my $stable = join( ",\n", @table );
		$stable =~ s/(\{.+?\}),/,$1/g;
		$stable =~ s/\s+,\s*/, /g;
		my $max = keys %hash;
		$max--;
		printf T"  %s:array [\$00 .. \$%.2X] of Word = (//\n", $table_name,
		  $max;
		print T"$stable);\n\n";
	}
	if (/^\$([0-9A-F]+):(.*)$/) {
		my $opc  = uc($1);
		my $fins = $2;
		my $flag;
		my $spmnem = 'INST_ID_UNKNOWN';
		if (/InvalidOpCode/) {
			$flag   = 'OPF_INVALID';
			$spmnem = 'INST_ID_INVALID';
		}
		elsif (/((\w+)*[-=]*\w+)\s*\(Prefix\)/) {
			my $prf = $1;
			$prf =~ s/[-=]/_/;
			$flag   = 'OPF_PREFIX';
			$spmnem = "INST_ID_PREFIX_\U$prf";
		}
		else {
			my @list = split( /\|/, $fins );
			my $prvsign = undef;
			foreach (@list) {
				$_ =~ s/^\s+//;
				my $args = '';
				my $mnem = $1 if (/(^\w+)/);
				$spmnem = "INST_ID_\U$mnem" if ( lc($mnem) ~~ @legacy_ins );

				$args = $1 if (/\s(.+)/);
				my $sign = get_sign($args);
				if (/(Grp.+?)(\s|$)/) {
					$spmnem = "INST_ID_$1";
				}
				$prvsign = $sign unless ( defined($prvsign) );
				if ( $prvsign ne $sign ) {
					$flag = "OPF_SPECIAL";
					last;
				}
				$flag = $sign;
			}
		}
		my $id      = hex($opc);
		my $comment = $line;
		$comment =~ s/^\$/0x/;
		$flag = $flag . ' or OPF_GRP' if ( $spmnem =~ /_Grp/ );
		$flag =~ s/OPF_NONE/OPF_MODRM/ if ( $flag =~ /OPF_GRP/ );
		$hash{$id} = "    ($spmnem shl \$08) or $flag { $comment }";
		register_ins($spmnem);

	}
}
close(F);
close(T);
print "Done.\n";

#exit;

foreach ( sort @insId ) {
	next if (/(UNKNOWN|INVALID)/);
	my $id = \$nsid;
	$id = \$prfid if (/_PREFIX/);
	$id = \$grpid if (/_GRP/i);
	$$id++;
	print "$_ = $$id;\n";
}
$nsid++;
print "INST_ID_INVALID = $nsid;\n";
print "INST_ID_UNKNOWN = 0;\n";
