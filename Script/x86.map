# Original map: x86-opcode-map.txt
Table: Table1
$00: ADD Eb,Gb
$01: ADD Ev,Gv
$02: ADD Gb,Eb
$03: ADD Gv,Ev
$04: ADD AL,Ib
$05: ADD rAX,Iz
$06: PUSH ES (i64)
$07: POP ES (i64)
$08: OR Eb,Gb
$09: OR Ev,Gv
$0A: OR Gb,Eb
$0B: OR Gv,Ev
$0C: OR AL,Ib
$0D: OR rAX,Iz
$0E: PUSH CS (i64)
$0F: escape # 2-byte escape
$10: ADC Eb,Gb
$11: ADC Ev,Gv
$12: ADC Gb,Eb
$13: ADC Gv,Ev
$14: ADC AL,Ib
$15: ADC rAX,Iz
$16: PUSH SS (i64)
$17: POP SS (i64)
$18: SBB Eb,Gb
$19: SBB Ev,Gv
$1A: SBB Gb,Eb
$1B: SBB Gv,Ev
$1C: SBB AL,Ib
$1D: SBB rAX,Iz
$1E: PUSH DS (i64)
$1F: POP DS (i64)
$20: AND Eb,Gb
$21: AND Ev,Gv
$22: AND Gb,Eb
$23: AND Gv,Ev
$24: AND AL,Ib
$25: AND rAx,Iz
$26: SEG=ES (Prefix)
$27: DAA (i64)
$28: SUB Eb,Gb
$29: SUB Ev,Gv
$2A: SUB Gb,Eb
$2B: SUB Gv,Ev
$2C: SUB AL,Ib
$2D: SUB rAX,Iz
$2E: SEG=CS (Prefix)
$2F: DAS (i64)
$30: XOR Eb,Gb
$31: XOR Ev,Gv
$32: XOR Gb,Eb
$33: XOR Gv,Ev
$34: XOR AL,Ib
$35: XOR rAX,Iz
$36: SEG=SS (Prefix)
$37: AAA (i64)
$38: CMP Eb,Gb
$39: CMP Ev,Gv
$3A: CMP Gb,Eb
$3B: CMP Gv,Ev
$3C: CMP AL,Ib
$3D: CMP rAX,Iz
$3E: SEG=DS (Prefix)
$3F: AAS (i64)
$40: INC eAX (i64) |REX (Prefix),(o64)
$41: INC eCX (i64) |REX (Prefix),(o64)
$42: INC eDX (i64) |REX (Prefix),(o64)
$43: INC eBX (i64) |REX (Prefix),(o64)
$44: INC eSP (i64) |REX (Prefix),(o64)
$45: INC eBP (i64) |REX (Prefix),(o64)
$46: INC eSI (i64) |REX (Prefix),(o64)
$47: INC eDI (i64) |REX (Prefix),(o64)
$48: DEC eAX (i64) |REX (Prefix),(o64)
$49: DEC eCX (i64) |REX (Prefix),(o64)
$4A: DEC eDX (i64) |REX (Prefix),(o64)
$4B: DEC eBX (i64) |REX (Prefix),(o64)
$4C: DEC eSP (i64) |REX (Prefix),(o64)
$4D: DEC eBP (i64) |REX (Prefix),(o64)
$4E: DEC eSI (i64) |REX (Prefix),(o64)
$4F: DEC eDI (i64) |REX (Prefix),(o64)
$50: PUSH rAX/r8 (d64)
$51: PUSH rCX/r9 (d64)
$52: PUSH rDX/r10 (d64)
$53: PUSH rBX/r11 (d64)
$54: PUSH rSP/r12 (d64)
$55: PUSH rBP/r13 (d64)
$56: PUSH rSI/r14 (d64)
$57: PUSH rDI/r15 (d64)
$58: POP rAX/r8 (d64)
$59: POP rCX/r9 (d64)
$5A: POP rDX/r10 (d64)
$5B: POP rBX/r11 (d64)
$5C: POP rSP/r12 (d64)
$5D: POP rBP/r13 (d64)
$5E: POP rSI/r14 (d64)
$5F: POP rDI/r15 (d64)
$60: PUSHA (i64)
$61: POPA (i64)
$62: BOUND Gv,Ma (i64) |EVEX (Prefix)
$63: ARPL Ew,Gw (i64) |MOVSXD Gv,Ev (o64)
$64: SEG=FS (Prefix)
$65: SEG=GS (Prefix)
$66: Operand-Size (Prefix)
$67: Address-Size (Prefix)
$68: PUSH Iz (d64)
$69: IMUL Gv,Ev,Iz
$6A: PUSH Ib (d64)
$6B: IMUL Gv,Ev,Ib
$6C: INS Yb,DX
$6D: INS Yz,DX
$6E: OUTS DX,Xb
$6F: OUTS DX,Xz
$70: JO Jb
$71: JNO Jb
$72: JB Jb
$73: JNB Jb
$74: JZ Jb
$75: JNZ Jb
$76: JBE Jb
$77: JNBE Jb
$78: JS Jb
$79: JNS Jb
$7A: JP Jb
$7B: JNP Jb
$7C: JL Jb
$7D: JNL Jb
$7E: JLE Jb
$7F: JNLE Jb
$80: Grp1 Eb,Ib (1A)
$81: Grp1 Ev,Iz (1A)
$82: Grp1 Eb,Ib (1A),(i64)
$83: Grp1 Ev,Ib (1A)
$84: TEST Eb,Gb
$85: TEST Ev,Gv
$86: XCHG Eb,Gb
$87: XCHG Ev,Gv
$88: MOV Eb,Gb
$89: MOV Ev,Gv
$8A: MOV Gb,Eb
$8B: MOV Gv,Ev
$8C: MOV Ev,Sw
$8D: LEA Gv,M
$8E: MOV Sw,Ew
$8F: Grp1A (1A) Ev
$90: NOP |PAUSE (F3)
$91: XCHG rCX/r9,rAX
$92: XCHG rDX/r10,rAX
$93: XCHG rBX/r11,rAX
$94: XCHG rSP/r12,rAX
$95: XCHG rBP/r13,rAX
$96: XCHG rSI/r14,rAX
$97: XCHG rDI/r15,rAX
$98: CBW 
$99: CWD 
$9A: CALL Ap (i64)
$9B: FWAIT 
$9C: PUSHF Fv (d64)
$9D: POPF Fv (d64)
$9E: SAHF 
$9F: LAHF 
$A0: MOV AL,Ob
$A1: MOV rAX,Ov
$A2: MOV Ob,AL
$A3: MOV Ov,rAX
$A4: MOVS Yb,Xb
$A5: MOVS Yv,Xv
$A6: CMPS Xb,Yb
$A7: CMPS Xv,Yv
$A8: TEST AL,Ib
$A9: TEST rAX,Iz
$AA: STOS Yb,AL
$AB: STOS Yv,rAX
$AC: LODS AL,Xb
$AD: LODS rAX,Xv
$AE: SCAS AL,Yb
$AF: SCAS rAX,Yv
$B0: MOV AL/R8L,Ib
$B1: MOV CL/R9L,Ib
$B2: MOV DL/R10L,Ib
$B3: MOV BL/R11L,Ib
$B4: MOV AH/R12L,Ib
$B5: MOV CH/R13L,Ib
$B6: MOV DH/R14L,Ib
$B7: MOV BH/R15L,Ib
$B8: MOV rAX/r8,Iv
$B9: MOV rCX/r9,Iv
$BA: MOV rDX/r10,Iv
$BB: MOV rBX/r11,Iv
$BC: MOV rSP/r12,Iv
$BD: MOV rBP/r13,Iv
$BE: MOV rSI/r14,Iv
$BF: MOV rDI/r15,Iv
$C0: Grp2 Eb,Ib (1A)
$C1: Grp2 Ev,Ib (1A)
$C2: RET Iw (f64)
$C3: RET 
$C4: LES Gz,Mp (i64) |VEX (Prefix)
$C5: LDS Gz,Mp (i64) |VEX (Prefix)
$C6: Grp11A Eb,Ib (1A)
$C7: Grp11B Ev,Iz (1A)
$C8: ENTER Iw,Ib
$C9: LEAVE (d64)
$CA: RET Iw
$CB: RET 
$CC: INT3 
$CD: INT Ib
$CE: INTO (i64)
$CF: IRET 
$D0: Grp2 Eb,1 (1A)
$D1: Grp2 Ev,1 (1A)
$D2: Grp2 Eb,CL (1A)
$D3: Grp2 Ev,CL (1A)
$D4: AAM Ib (i64)
$D5: AAD Ib (i64)
$D6: InvalidOpCode 
$D7: XLAT 
$D8: ESC 
$D9: ESC 
$DA: ESC 
$DB: ESC 
$DC: ESC 
$DD: ESC 
$DE: ESC 
$DF: ESC 
$E0: LOOPNE Jb (f64)
$E1: LOOPE Jb (f64)
$E2: LOOP Jb (f64)
$E3: JrCXZ Jb (f64)
$E4: IN AL,Ib
$E5: IN eAX,Ib
$E6: OUT Ib,AL
$E7: OUT Ib,eAX
$E8: CALL Jz (f64)
$E9: JMP Jz (f64)
$EA: JMP Ap (i64)
$EB: JMP Jb (f64)
$EC: IN AL,DX
$ED: IN eAX,DX
$EE: OUT DX,AL
$EF: OUT DX,eAX
$F0: LOCK (Prefix)
$F1: InvalidOpCode 
$F2: REPNE (Prefix) |XACQUIRE (Prefix)
$F3: REP (Prefix) |XRELEASE (Prefix)
$F4: HLT 
$F5: CMC 
$F6: Grp3_1 Eb (1A)
$F7: Grp3_2 Ev (1A)
$F8: CLC 
$F9: STC 
$FA: CLI 
$FB: STI 
$FC: CLD 
$FD: STD 
$FE: Grp4 (1A)
$FF: Grp5 (1A)
EndTable
Table: Table2
$00: Grp6 (1A)
$01: Grp7 (1A)
$02: LAR Gv,Ew
$03: LSL Gv,Ew
$04: InvalidOpCode 
$05: SYSCALL (o64)
$06: CLTS 
$07: SYSRET (o64)
$08: INVD 
$09: WBINVD 
$0A: InvalidOpCode 
$0B: UD2 (1B)
$0C: InvalidOpCode 
$0D: GrpP 
$0E: FEMMS 
$0F: 3DNow! Pq,Qq,Ib
$10: vmovups Vps,Wps |vmovupd Vpd,Wpd (66) |vmovss Vx,Hx,Wss (F3),(v1) |vmovsd Vx,Hx,Wsd (F2),(v1)
$11: vmovups Wps,Vps |vmovupd Wpd,Vpd (66) |vmovss Wss,Hx,Vss (F3),(v1) |vmovsd Wsd,Hx,Vsd (F2),(v1)
$12: vmovlps Vq,Hq,Mq (v1) |vmovhlps Vq,Hq,Uq (v1) |vmovlpd Vq,Hq,Mq (66),(v1) |vmovsldup Vx,Wx (F3) |vmovddup Vx,Wx (F2)
$13: vmovlps Mq,Vq (v1) |vmovlpd Mq,Vq (66),(v1)
$14: vunpcklps Vx,Hx,Wx |vunpcklpd Vx,Hx,Wx (66)
$15: vunpckhps Vx,Hx,Wx |vunpckhpd Vx,Hx,Wx (66)
$16: vmovhps Vdq,Hq,Mq (v1) |vmovlhps Vdq,Hq,Uq (v1) |vmovhpd Vdq,Hq,Mq (66),(v1) |vmovshdup Vx,Wx (F3)
$17: vmovhps Mq,Vq (v1) |vmovhpd Mq,Vq (66),(v1)
$18: Grp16 (1A)
$19: InvalidOpCode 
$1A: BNDCL Gv,Ev (F3) |BNDCU Gv,Ev (F2) |BNDMOV Gv,Ev (66) |BNDLDX Gv,Ev
$1B: BNDCN Gv,Ev (F2) |BNDMOV Ev,Gv (66) |BNDMK Gv,Ev (F3) |BNDSTX Ev,Gv
$1C: InvalidOpCode 
$1D: InvalidOpCode 
$1E: InvalidOpCode 
$1F: NOP Ev
$20: MOV Rd,Cd
$21: MOV Rd,Dd
$22: MOV Cd,Rd
$23: MOV Dd,Rd
$24: InvalidOpCode 
$25: InvalidOpCode 
$26: InvalidOpCode 
$27: InvalidOpCode 
$28: vmovaps Vps,Wps |vmovapd Vpd,Wpd (66)
$29: vmovaps Wps,Vps |vmovapd Wpd,Vpd (66)
$2A: cvtpi2ps Vps,Qpi |cvtpi2pd Vpd,Qpi (66) |vcvtsi2ss Vss,Hss,Ey (F3),(v1) |vcvtsi2sd Vsd,Hsd,Ey (F2),(v1)
$2B: vmovntps Mps,Vps |vmovntpd Mpd,Vpd (66)
$2C: cvttps2pi Ppi,Wps |cvttpd2pi Ppi,Wpd (66) |vcvttss2si Gy,Wss (F3),(v1) |vcvttsd2si Gy,Wsd (F2),(v1)
$2D: cvtps2pi Ppi,Wps |cvtpd2pi Qpi,Wpd (66) |vcvtss2si Gy,Wss (F3),(v1) |vcvtsd2si Gy,Wsd (F2),(v1)
$2E: vucomiss Vss,Wss (v1) |vucomisd  Vsd,Wsd (66),(v1)
$2F: vcomiss Vss,Wss (v1) |vcomisd  Vsd,Wsd (66),(v1)
$30: WRMSR 
$31: RDTSC 
$32: RDMSR 
$33: RDPMC 
$34: SYSENTER 
$35: SYSEXIT 
$36: InvalidOpCode 
$37: GETSEC 
$38: escape # 3-byte escape 1
$39: InvalidOpCode 
$3A: escape # 3-byte escape 2
$3B: InvalidOpCode 
$3C: InvalidOpCode 
$3D: InvalidOpCode 
$3E: InvalidOpCode 
$3F: InvalidOpCode 
$40: CMOVO Gv,Ev
$41: CMOVNO Gv,Ev |kandw/kandq Vk,Hk,Uk |kandb/kandd Vk,Hk,Uk (66)
$42: CMOVB Gv,Ev |kandnw/kandnq Vk,Hk,Uk |kandnb/kandnd Vk,Hk,Uk (66)
$43: CMOVAE Gv,Ev
$44: CMOVE Gv,Ev |knotw/knotq Vk,Uk |knotb/knotd Vk,Uk (66)
$45: CMOVNE Gv,Ev |korw/korq Vk,Hk,Uk |korb/kord Vk,Hk,Uk (66)
$46: CMOVBE Gv,Ev |kxnorw/kxnorq Vk,Hk,Uk |kxnorb/kxnord Vk,Hk,Uk (66)
$47: CMOVA Gv,Ev |kxorw/kxorq Vk,Hk,Uk |kxorb/kxord Vk,Hk,Uk (66)
$48: CMOVS Gv,Ev
$49: CMOVNS Gv,Ev
$4A: CMOVP Gv,Ev |kaddw/kaddq Vk,Hk,Uk |kaddb/kaddd Vk,Hk,Uk (66)
$4B: CMOVNP Gv,Ev |kunpckbw Vk,Hk,Uk (66) |kunpckwd/kunpckdq Vk,Hk,Uk
$4C: CMOVL Gv,Ev
$4D: CMOVNL Gv,Ev
$4E: CMOVLE Gv,Ev
$4F: CMOVNLE Gv,Ev
$50: vmovmskps Gy,Ups |vmovmskpd Gy,Upd (66)
$51: vsqrtps Vps,Wps |vsqrtpd Vpd,Wpd (66) |vsqrtss Vss,Hss,Wss (F3),(v1) |vsqrtsd Vsd,Hsd,Wsd (F2),(v1)
$52: vrsqrtps Vps,Wps |vrsqrtss Vss,Hss,Wss (F3),(v1)
$53: vrcpps Vps,Wps |vrcpss Vss,Hss,Wss (F3),(v1)
$54: vandps Vps,Hps,Wps |vandpd Vpd,Hpd,Wpd (66)
$55: vandnps Vps,Hps,Wps |vandnpd Vpd,Hpd,Wpd (66)
$56: vorps Vps,Hps,Wps |vorpd Vpd,Hpd,Wpd (66)
$57: vxorps Vps,Hps,Wps |vxorpd Vpd,Hpd,Wpd (66)
$58: vaddps Vps,Hps,Wps |vaddpd Vpd,Hpd,Wpd (66) |vaddss Vss,Hss,Wss (F3),(v1) |vaddsd Vsd,Hsd,Wsd (F2),(v1)
$59: vmulps Vps,Hps,Wps |vmulpd Vpd,Hpd,Wpd (66) |vmulss Vss,Hss,Wss (F3),(v1) |vmulsd Vsd,Hsd,Wsd (F2),(v1)
$5A: vcvtps2pd Vpd,Wps |vcvtpd2ps Vps,Wpd (66) |vcvtss2sd Vsd,Hx,Wss (F3),(v1) |vcvtsd2ss Vss,Hx,Wsd (F2),(v1)
$5B: vcvtdq2ps Vps,Wdq |vcvtqq2ps Vps,Wqq (evo) |vcvtps2dq Vdq,Wps (66) |vcvttps2dq Vdq,Wps (F3)
$5C: vsubps Vps,Hps,Wps |vsubpd Vpd,Hpd,Wpd (66) |vsubss Vss,Hss,Wss (F3),(v1) |vsubsd Vsd,Hsd,Wsd (F2),(v1)
$5D: vminps Vps,Hps,Wps |vminpd Vpd,Hpd,Wpd (66) |vminss Vss,Hss,Wss (F3),(v1) |vminsd Vsd,Hsd,Wsd (F2),(v1)
$5E: vdivps Vps,Hps,Wps |vdivpd Vpd,Hpd,Wpd (66) |vdivss Vss,Hss,Wss (F3),(v1) |vdivsd Vsd,Hsd,Wsd (F2),(v1)
$5F: vmaxps Vps,Hps,Wps |vmaxpd Vpd,Hpd,Wpd (66) |vmaxss Vss,Hss,Wss (F3),(v1) |vmaxsd Vsd,Hsd,Wsd (F2),(v1)
$60: punpcklbw Pq,Qd |vpunpcklbw Vx,Hx,Wx (66),(v1)
$61: punpcklwd Pq,Qd |vpunpcklwd Vx,Hx,Wx (66),(v1)
$62: punpckldq Pq,Qd |vpunpckldq Vx,Hx,Wx (66),(v1)
$63: packsswb Pq,Qq |vpacksswb Vx,Hx,Wx (66),(v1)
$64: pcmpgtb Pq,Qq |vpcmpgtb Vx,Hx,Wx (66),(v1)
$65: pcmpgtw Pq,Qq |vpcmpgtw Vx,Hx,Wx (66),(v1)
$66: pcmpgtd Pq,Qq |vpcmpgtd Vx,Hx,Wx (66),(v1)
$67: packuswb Pq,Qq |vpackuswb Vx,Hx,Wx (66),(v1)
$68: punpckhbw Pq,Qd |vpunpckhbw Vx,Hx,Wx (66),(v1)
$69: punpckhwd Pq,Qd |vpunpckhwd Vx,Hx,Wx (66),(v1)
$6A: punpckhdq Pq,Qd |vpunpckhdq Vx,Hx,Wx (66),(v1)
$6B: packssdw Pq,Qd |vpackssdw Vx,Hx,Wx (66),(v1)
$6C: vpunpcklqdq Vx,Hx,Wx (66),(v1)
$6D: vpunpckhqdq Vx,Hx,Wx (66),(v1)
$6E: movd/movq Pd,Ey |vmovd/vmovq Vy,Ey (66),(v1)
$6F: movq Pq,Qq |vmovdqa Vx,Wx (66) |vmovdqa32/vmovdqa64 Vx,Wx (66),(evo) |vmovdqu Vx,Wx (F3) |vmovdqu32/vmovdqu64 Vx,Wx (F3),(evo) |vmovdqu8/vmovdq16 Vx,Wx (F2),(ev)
$70: pshufw Pq,Qq,Ib |vpshufd Vx,Wx,Ib (66),(v1) |vpshufhw Vx,Wx,Ib (F3),(v1) |vpshuflw Vx,Wx,Ib (F2),(v1)
$71: Grp12 (1A)
$72: Grp13 (1A)
$73: Grp14 (1A)
$74: pcmpeqb Pq,Qq |vpcmpeqb Vx,Hx,Wx (66),(v1)
$75: pcmpeqw Pq,Qq |vpcmpeqw Vx,Hx,Wx (66),(v1)
$76: pcmpeqd Pq,Qq |vpcmpeqd Vx,Hx,Wx (66),(v1)
$77: emms |vzeroupper |vzeroall 
$78: VMREAD Ey,Gy |vcvttps2udq/vcvttpd2udq Vx,Wpd (evo) |vcvttsd2usi Gv,Wx (F2),(ev) |vcvttss2usi Gv,Wx (F3),(ev) |vcvttps2uqq/vcvttpd2uqq Vx,Wx (66),(ev)
$79: VMWRITE Gy,Ey |vcvtps2udq/vcvtpd2udq Vx,Wpd (evo) |vcvtsd2usi Gv,Wx (F2),(ev) |vcvtss2usi Gv,Wx (F3),(ev) |vcvtps2uqq/vcvtpd2uqq Vx,Wx (66),(ev)
$7A: vcvtudq2pd/vcvtuqq2pd Vpd,Wx (F3),(ev) |vcvtudq2ps/vcvtuqq2ps Vpd,Wx (F2),(ev) |vcvttps2qq/vcvttpd2qq Vx,Wx (66),(ev)
$7B: vcvtusi2sd Vpd,Hpd,Ev (F2),(ev) |vcvtusi2ss Vps,Hps,Ev (F3),(ev) |vcvtps2qq/vcvtpd2qq Vx,Wx (66),(ev)
$7C: vhaddpd Vpd,Hpd,Wpd (66) |vhaddps Vps,Hps,Wps (F2)
$7D: vhsubpd Vpd,Hpd,Wpd (66) |vhsubps Vps,Hps,Wps (F2)
$7E: movd/movq Ey,Pd |vmovd/vmovq Ey,Vy (66),(v1) |vmovq Vq,Wq (F3),(v1)
$7F: movq Qq,Pq |vmovdqa Wx,Vx (66) |vmovdqa32/vmovdqa64 Wx,Vx (66),(evo) |vmovdqu Wx,Vx (F3) |vmovdqu32/vmovdqu64 Wx,Vx (F3),(evo) |vmovdqu8/vmovdq16 Wx,Vx (F2),(ev)
$80: JO Jz (f64)
$81: JNO Jz (f64)
$82: JB Jz (f64)
$83: JAE Jz (f64)
$84: JE Jz (f64)
$85: JNE Jz (f64)
$86: JBE Jz (f64)
$87: JA Jz (f64)
$88: JS Jz (f64)
$89: JNS Jz (f64)
$8A: JP Jz (f64)
$8B: JNP Jz (f64)
$8C: JL Jz (f64)
$8D: JNL Jz (f64)
$8E: JLE Jz (f64)
$8F: JNLE Jz (f64)
$90: SETO Eb |kmovw/kmovq Vk,Wk |kmovb/kmovd Vk,Wk (66)
$91: SETNO Eb |kmovw/kmovq Mv,Vk |kmovb/kmovd Mv,Vk (66)
$92: SETB Eb |kmovw Vk,Rv |kmovb Vk,Rv (66) |kmovq/kmovd Vk,Rv (F2)
$93: SETAE Eb |kmovw Gv,Uk |kmovb Gv,Uk (66) |kmovq/kmovd Gv,Uk (F2)
$94: SETE Eb
$95: SETNE Eb
$96: SETBE Eb
$97: SETA Eb
$98: SETS Eb |kortestw/kortestq Vk,Uk |kortestb/kortestd Vk,Uk (66)
$99: SETNS Eb |ktestw/ktestq Vk,Uk |ktestb/ktestd Vk,Uk (66)
$9A: SETP Eb
$9B: SETNP Eb
$9C: SETL Eb
$9D: SETNL Eb
$9E: SETLE Eb
$9F: SETNLE Eb
$A0: PUSH FS (d64)
$A1: POP FS (d64)
$A2: CPUID 
$A3: BT Ev,Gv
$A4: SHLD Ev,Gv,Ib
$A5: SHLD Ev,Gv,CL
$A6: GrpPDLK 
$A7: GrpRNG 
$A8: PUSH GS (d64)
$A9: POP GS (d64)
$AA: RSM 
$AB: BTS Ev,Gv
$AC: SHRD Ev,Gv,Ib
$AD: SHRD Ev,Gv,CL
$AE: Grp15 (1A),(1C)
$AF: IMUL Gv,Ev
$B0: CMPXCHG Eb,Gb
$B1: CMPXCHG Ev,Gv
$B2: LSS Gv,Mp
$B3: BTR Ev,Gv
$B4: LFS Gv,Mp
$B5: LGS Gv,Mp
$B6: MOVZX Gv,Eb
$B7: MOVZX Gv,Ew
$B8: POPCNT Gv,Ev (F3)
$B9: Grp10 (1A)
$BA: Grp8 Ev,Ib (1A)
$BB: BTC Ev,Gv
$BC: BSF Gv,Ev (!F3) |TZCNT Gv,Ev (F3)
$BD: BSR Gv,Ev (!F3) |LZCNT Gv,Ev (F3)
$BE: MOVSX Gv,Eb
$BF: MOVSX Gv,Ew
$C0: XADD Eb,Gb
$C1: XADD Ev,Gv
$C2: vcmpps Vps,Hps,Wps,Ib |vcmppd Vpd,Hpd,Wpd,Ib (66) |vcmpss Vss,Hss,Wss,Ib (F3),(v1) |vcmpsd Vsd,Hsd,Wsd,Ib (F2),(v1)
$C3: movnti My,Gy
$C4: pinsrw Pq,Ry/Mw,Ib |vpinsrw Vdq,Hdq,Ry/Mw,Ib (66),(v1)
$C5: pextrw Gd,Nq,Ib |vpextrw Gd,Udq,Ib (66),(v1)
$C6: vshufps Vps,Hps,Wps,Ib |vshufpd Vpd,Hpd,Wpd,Ib (66)
$C7: Grp9 (1A)
$C8: BSWAP RAX/EAX/R8/R8D
$C9: BSWAP RCX/ECX/R9/R9D
$CA: BSWAP RDX/EDX/R10/R10D
$CB: BSWAP RBX/EBX/R11/R11D
$CC: BSWAP RSP/ESP/R12/R12D
$CD: BSWAP RBP/EBP/R13/R13D
$CE: BSWAP RSI/ESI/R14/R14D
$CF: BSWAP RDI/EDI/R15/R15D
$D0: vaddsubpd Vpd,Hpd,Wpd (66) |vaddsubps Vps,Hps,Wps (F2)
$D1: psrlw Pq,Qq |vpsrlw Vx,Hx,Wx (66),(v1)
$D2: psrld Pq,Qq |vpsrld Vx,Hx,Wx (66),(v1)
$D3: psrlq Pq,Qq |vpsrlq Vx,Hx,Wx (66),(v1)
$D4: paddq Pq,Qq |vpaddq Vx,Hx,Wx (66),(v1)
$D5: pmullw Pq,Qq |vpmullw Vx,Hx,Wx (66),(v1)
$D6: vmovq Wq,Vq (66),(v1) |movq2dq Vdq,Nq (F3) |movdq2q Pq,Uq (F2)
$D7: pmovmskb Gd,Nq |vpmovmskb Gd,Ux (66),(v1)
$D8: psubusb Pq,Qq |vpsubusb Vx,Hx,Wx (66),(v1)
$D9: psubusw Pq,Qq |vpsubusw Vx,Hx,Wx (66),(v1)
$DA: pminub Pq,Qq |vpminub Vx,Hx,Wx (66),(v1)
$DB: pand Pq,Qq |vpand Vx,Hx,Wx (66),(v1) |vpandd/vpandq Vx,Hx,Wx (66),(evo)
$DC: paddusb Pq,Qq |vpaddusb Vx,Hx,Wx (66),(v1)
$DD: paddusw Pq,Qq |vpaddusw Vx,Hx,Wx (66),(v1)
$DE: pmaxub Pq,Qq |vpmaxub Vx,Hx,Wx (66),(v1)
$DF: pandn Pq,Qq |vpandn Vx,Hx,Wx (66),(v1) |vpandnd/vpandnq Vx,Hx,Wx (66),(evo)
$E0: pavgb Pq,Qq |vpavgb Vx,Hx,Wx (66),(v1)
$E1: psraw Pq,Qq |vpsraw Vx,Hx,Wx (66),(v1)
$E2: psrad Pq,Qq |vpsrad Vx,Hx,Wx (66),(v1)
$E3: pavgw Pq,Qq |vpavgw Vx,Hx,Wx (66),(v1)
$E4: pmulhuw Pq,Qq |vpmulhuw Vx,Hx,Wx (66),(v1)
$E5: pmulhw Pq,Qq |vpmulhw Vx,Hx,Wx (66),(v1)
$E6: vcvttpd2dq Vx,Wpd (66) |vcvtdq2pd Vx,Wdq (F3) |vcvtdq2pd/vcvtqq2pd Vx,Wdq (F3),(evo) |vcvtpd2dq Vx,Wpd (F2)
$E7: movntq Mq,Pq |vmovntdq Mx,Vx (66)
$E8: psubsb Pq,Qq |vpsubsb Vx,Hx,Wx (66),(v1)
$E9: psubsw Pq,Qq |vpsubsw Vx,Hx,Wx (66),(v1)
$EA: pminsw Pq,Qq |vpminsw Vx,Hx,Wx (66),(v1)
$EB: por Pq,Qq |vpor Vx,Hx,Wx (66),(v1) |vpord/vporq Vx,Hx,Wx (66),(evo)
$EC: paddsb Pq,Qq |vpaddsb Vx,Hx,Wx (66),(v1)
$ED: paddsw Pq,Qq |vpaddsw Vx,Hx,Wx (66),(v1)
$EE: pmaxsw Pq,Qq |vpmaxsw Vx,Hx,Wx (66),(v1)
$EF: pxor Pq,Qq |vpxor Vx,Hx,Wx (66),(v1) |vpxord/vpxorq Vx,Hx,Wx (66),(evo)
$F0: vlddqu Vx,Mx (F2)
$F1: psllw Pq,Qq |vpsllw Vx,Hx,Wx (66),(v1)
$F2: pslld Pq,Qq |vpslld Vx,Hx,Wx (66),(v1)
$F3: psllq Pq,Qq |vpsllq Vx,Hx,Wx (66),(v1)
$F4: pmuludq Pq,Qq |vpmuludq Vx,Hx,Wx (66),(v1)
$F5: pmaddwd Pq,Qq |vpmaddwd Vx,Hx,Wx (66),(v1)
$F6: psadbw Pq,Qq |vpsadbw Vx,Hx,Wx (66),(v1)
$F7: maskmovq Pq,Nq |vmaskmovdqu Vx,Ux (66),(v1)
$F8: psubb Pq,Qq |vpsubb Vx,Hx,Wx (66),(v1)
$F9: psubw Pq,Qq |vpsubw Vx,Hx,Wx (66),(v1)
$FA: psubd Pq,Qq |vpsubd Vx,Hx,Wx (66),(v1)
$FB: psubq Pq,Qq |vpsubq Vx,Hx,Wx (66),(v1)
$FC: paddb Pq,Qq |vpaddb Vx,Hx,Wx (66),(v1)
$FD: paddw Pq,Qq |vpaddw Vx,Hx,Wx (66),(v1)
$FE: paddd Pq,Qq |vpaddd Vx,Hx,Wx (66),(v1)
$FF: InvalidOpCode 
EndTable
Table: Table38
$00: pshufb Pq,Qq |vpshufb Vx,Hx,Wx (66),(v1)
$01: phaddw Pq,Qq |vphaddw Vx,Hx,Wx (66),(v1)
$02: phaddd Pq,Qq |vphaddd Vx,Hx,Wx (66),(v1)
$03: phaddsw Pq,Qq |vphaddsw Vx,Hx,Wx (66),(v1)
$04: pmaddubsw Pq,Qq |vpmaddubsw Vx,Hx,Wx (66),(v1)
$05: phsubw Pq,Qq |vphsubw Vx,Hx,Wx (66),(v1)
$06: phsubd Pq,Qq |vphsubd Vx,Hx,Wx (66),(v1)
$07: phsubsw Pq,Qq |vphsubsw Vx,Hx,Wx (66),(v1)
$08: psignb Pq,Qq |vpsignb Vx,Hx,Wx (66),(v1)
$09: psignw Pq,Qq |vpsignw Vx,Hx,Wx (66),(v1)
$0A: psignd Pq,Qq |vpsignd Vx,Hx,Wx (66),(v1)
$0B: pmulhrsw Pq,Qq |vpmulhrsw Vx,Hx,Wx (66),(v1)
$0C: vpermilps Vx,Hx,Wx (66),(v)
$0D: vpermilpd Vx,Hx,Wx (66),(v)
$0E: vtestps Vx,Wx (66),(v)
$0F: vtestpd Vx,Wx (66),(v)
$10: pblendvb Vdq,Wdq (66) |vpsrlvw Vx,Hx,Wx (66),(evo) |vpmovuswb Wx,Vx (F3),(ev)
$11: vpmovusdb Wx,Vd (F3),(ev) |vpsravw Vx,Hx,Wx (66),(ev)
$12: vpmovusqb Wx,Vq (F3),(ev) |vpsllvw Vx,Hx,Wx (66),(ev)
$13: vcvtph2ps Vx,Wx (66),(v) |vpmovusdw Wx,Vd (F3),(ev)
$14: blendvps Vdq,Wdq (66) |vpmovusqw Wx,Vq (F3),(ev) |vprorvd/vprorvq Vx,Hx,Wx (66),(evo)
$15: blendvpd Vdq,Wdq (66) |vpmovusqd Wx,Vq (F3),(ev) |vprolvd/vprolvq Vx,Hx,Wx (66),(evo)
$16: vpermps Vqq,Hqq,Wqq (66),(v) |vpermps/vpermpd Vqq,Hqq,Wqq (66),(evo)
$17: vptest Vx,Wx (66)
$18: vbroadcastss Vx,Wd (66),(v)
$19: vbroadcastsd Vqq,Wq (66),(v) |vbroadcastf32x2 Vqq,Wq (66),(evo)
$1A: vbroadcastf128 Vqq,Mdq (66),(v) |vbroadcastf32x4/vbroadcastf64x2 Vqq,Wq (66),(evo)
$1B: vbroadcastf32x8/vbroadcastf64x4 Vqq,Mdq (66),(ev)
$1C: pabsb Pq,Qq |vpabsb Vx,Wx (66),(v1)
$1D: pabsw Pq,Qq |vpabsw Vx,Wx (66),(v1)
$1E: pabsd Pq,Qq |vpabsd Vx,Wx (66),(v1)
$1F: vpabsq Vx,Wx (66),(ev)
$20: vpmovsxbw Vx,Ux/Mq (66),(v1) |vpmovswb Wx,Vx (F3),(ev)
$21: vpmovsxbd Vx,Ux/Md (66),(v1) |vpmovsdb Wx,Vd (F3),(ev)
$22: vpmovsxbq Vx,Ux/Mw (66),(v1) |vpmovsqb Wx,Vq (F3),(ev)
$23: vpmovsxwd Vx,Ux/Mq (66),(v1) |vpmovsdw Wx,Vd (F3),(ev)
$24: vpmovsxwq Vx,Ux/Md (66),(v1) |vpmovsqw Wx,Vq (F3),(ev)
$25: vpmovsxdq Vx,Ux/Mq (66),(v1) |vpmovsqd Wx,Vq (F3),(ev)
$26: vptestmb/vptestmw Vk,Hx,Wx (66),(ev) |vptestnmb/vptestnmw Vk,Hx,Wx (F3),(ev)
$27: vptestmd/vptestmq Vk,Hx,Wx (66),(ev) |vptestnmd/vptestnmq Vk,Hx,Wx (F3),(ev)
$28: vpmuldq Vx,Hx,Wx (66),(v1) |vpmovm2b/vpmovm2w Vx,Uk (F3),(ev)
$29: vpcmpeqq Vx,Hx,Wx (66),(v1) |vpmovb2m/vpmovw2m Vk,Ux (F3),(ev)
$2A: vmovntdqa Vx,Mx (66),(v1) |vpbroadcastmb2q Vx,Uk (F3),(ev)
$2B: vpackusdw Vx,Hx,Wx (66),(v1)
$2C: vmaskmovps Vx,Hx,Mx (66),(v) |vscalefps/vscalefpd Vx,Hx,Wx (66),(evo)
$2D: vmaskmovpd Vx,Hx,Mx (66),(v) |vscalefss/vscalefsd Vx,Hx,Wx (66),(evo)
$2E: vmaskmovps Mx,Hx,Vx (66),(v)
$2F: vmaskmovpd Mx,Hx,Vx (66),(v)
$30: vpmovzxbw Vx,Ux/Mq (66),(v1) |vpmovwb Wx,Vx (F3),(ev)
$31: vpmovzxbd Vx,Ux/Md (66),(v1) |vpmovdb Wx,Vd (F3),(ev)
$32: vpmovzxbq Vx,Ux/Mw (66),(v1) |vpmovqb Wx,Vq (F3),(ev)
$33: vpmovzxwd Vx,Ux/Mq (66),(v1) |vpmovdw Wx,Vd (F3),(ev)
$34: vpmovzxwq Vx,Ux/Md (66),(v1) |vpmovqw Wx,Vq (F3),(ev)
$35: vpmovzxdq Vx,Ux/Mq (66),(v1) |vpmovqd Wx,Vq (F3),(ev)
$36: vpermd Vqq,Hqq,Wqq (66),(v) |vpermd/vpermq Vqq,Hqq,Wqq (66),(evo)
$37: vpcmpgtq Vx,Hx,Wx (66),(v1)
$38: vpminsb Vx,Hx,Wx (66),(v1) |vpmovm2d/vpmovm2q Vx,Uk (F3),(ev)
$39: vpminsd Vx,Hx,Wx (66),(v1) |vpminsd/vpminsq Vx,Hx,Wx (66),(evo) |vpmovd2m/vpmovq2m Vk,Ux (F3),(ev)
$3A: vpminuw Vx,Hx,Wx (66),(v1) |vpbroadcastmw2d Vx,Uk (F3),(ev)
$3B: vpminud Vx,Hx,Wx (66),(v1) |vpminud/vpminuq Vx,Hx,Wx (66),(evo)
$3C: vpmaxsb Vx,Hx,Wx (66),(v1)
$3D: vpmaxsd Vx,Hx,Wx (66),(v1) |vpmaxsd/vpmaxsq Vx,Hx,Wx (66),(evo)
$3E: vpmaxuw Vx,Hx,Wx (66),(v1)
$3F: vpmaxud Vx,Hx,Wx (66),(v1) |vpmaxud/vpmaxuq Vx,Hx,Wx (66),(evo)
$40: vpmulld Vx,Hx,Wx (66),(v1) |vpmulld/vpmullq Vx,Hx,Wx (66),(evo)
$41: vphminposuw Vdq,Wdq (66),(v1)
$42: vgetexpps/vgetexppd Vx,Wx (66),(ev)
$43: vgetexpss/vgetexpsd Vx,Hx,Wx (66),(ev)
$44: vplzcntd/vplzcntq Vx,Wx (66),(ev)
$45: vpsrlvd/vpsrlvq Vx,Hx,Wx (66),(v)
$46: vpsravd Vx,Hx,Wx (66),(v) |vpsravd/vpsravq Vx,Hx,Wx (66),(evo)
$47: vpsllvd/vpsllvq Vx,Hx,Wx (66),(v)
$4C: vrcp14ps/vrcp14pd Vpd,Wpd (66),(ev)
$4D: vrcp14ss/vrcp14sd Vsd,Hpd,Wsd (66),(ev)
$4E: vrsqrt14ps/vrsqrt14pd Vpd,Wpd (66),(ev)
$4F: vrsqrt14ss/vrsqrt14sd Vsd,Hsd,Wsd (66),(ev)
$58: vpbroadcastd Vx,Wx (66),(v)
$59: vpbroadcastq Vx,Wx (66),(v) |vbroadcasti32x2 Vx,Wx (66),(evo)
$5A: vbroadcasti128 Vqq,Mdq (66),(v) |vbroadcasti32x4/vbroadcasti64x2 Vx,Wx (66),(evo)
$5B: vbroadcasti32x8/vbroadcasti64x4 Vqq,Mdq (66),(ev)
$64: vpblendmd/vpblendmq Vx,Hx,Wx (66),(ev)
$65: vblendmps/vblendmpd Vx,Hx,Wx (66),(ev)
$66: vpblendmb/vpblendmw Vx,Hx,Wx (66),(ev)
$75: vpermi2b/vpermi2w Vx,Hx,Wx (66),(ev)
$76: vpermi2d/vpermi2q Vx,Hx,Wx (66),(ev)
$77: vpermi2ps/vpermi2pd Vx,Hx,Wx (66),(ev)
$78: vpbroadcastb Vx,Wx (66),(v)
$79: vpbroadcastw Vx,Wx (66),(v)
$7A: vpbroadcastb Vx,Rv (66),(ev)
$7B: vpbroadcastw Vx,Rv (66),(ev)
$7C: vpbroadcastd/vpbroadcastq Vx,Rv (66),(ev)
$7D: vpermt2b/vpermt2w Vx,Hx,Wx (66),(ev)
$7E: vpermt2d/vpermt2q Vx,Hx,Wx (66),(ev)
$7F: vpermt2ps/vpermt2pd Vx,Hx,Wx (66),(ev)
$80: INVEPT Gy,Mdq (66)
$81: INVPID Gy,Mdq (66)
$82: INVPCID Gy,Mdq (66)
$83: vpmultishiftqb Vx,Hx,Wx (66),(ev)
$88: vexpandps/vexpandpd Vpd,Wpd (66),(ev)
$89: vpexpandd/vpexpandq Vx,Wx (66),(ev)
$8A: vcompressps/vcompresspd Wx,Vx (66),(ev)
$8B: vpcompressd/vpcompressq Wx,Vx (66),(ev)
$8C: vpmaskmovd/vpmaskmovq Vx,Hx,Mx (66),(v)
$8D: vpermb/vpermw Vx,Hx,Wx (66),(ev)
$8E: vpmaskmovd/vpmaskmovq Mx,Vx,Hx (66),(v)
$90: vgatherdd/vgatherdq Vx,Hx,Wx (66),(v) |vpgatherdd/vpgatherdq Vx,Wx (66),(evo)
$91: vgatherqd/vgatherqq Vx,Hx,Wx (66),(v) |vpgatherqd/vpgatherqq Vx,Wx (66),(evo)
$92: vgatherdps/vgatherdpd Vx,Hx,Wx (66),(v)
$93: vgatherqps/vgatherqpd Vx,Hx,Wx (66),(v)
$94: InvalidOpCode 
$95: InvalidOpCode 
$96: vfmaddsub132ps/vfmaddsub132pd Vx,Hx,Wx (66),(v)
$97: vfmsubadd132ps/vfmsubadd132pd Vx,Hx,Wx (66),(v)
$98: vfmadd132ps/vfmadd132pd Vx,Hx,Wx (66),(v)
$99: vfmadd132ss/vfmadd132sd Vx,Hx,Wx (66),(v),(v1)
$9A: vfmsub132ps/vfmsub132pd Vx,Hx,Wx (66),(v)
$9B: vfmsub132ss/vfmsub132sd Vx,Hx,Wx (66),(v),(v1)
$9C: vfnmadd132ps/vfnmadd132pd Vx,Hx,Wx (66),(v)
$9D: vfnmadd132ss/vfnmadd132sd Vx,Hx,Wx (66),(v),(v1)
$9E: vfnmsub132ps/vfnmsub132pd Vx,Hx,Wx (66),(v)
$9F: vfnmsub132ss/vfnmsub132sd Vx,Hx,Wx (66),(v),(v1)
$A0: vpscatterdd/vpscatterdq Wx,Vx (66),(ev)
$A1: vpscatterqd/vpscatterqq Wx,Vx (66),(ev)
$A2: vscatterdps/vscatterdpd Wx,Vx (66),(ev)
$A3: vscatterqps/vscatterqpd Wx,Vx (66),(ev)
$A6: vfmaddsub213ps/vfmaddsub213pd Vx,Hx,Wx (66),(v)
$A7: vfmsubadd213ps/vfmsubadd213pd Vx,Hx,Wx (66),(v)
$A8: vfmadd213ps/vfmadd213pd Vx,Hx,Wx (66),(v)
$A9: vfmadd213ss/vfmadd213sd Vx,Hx,Wx (66),(v),(v1)
$AA: vfmsub213ps/vfmsub213pd Vx,Hx,Wx (66),(v)
$AB: vfmsub213ss/vfmsub213sd Vx,Hx,Wx (66),(v),(v1)
$AC: vfnmadd213ps/vfnmadd213pd Vx,Hx,Wx (66),(v)
$AD: vfnmadd213ss/vfnmadd213sd Vx,Hx,Wx (66),(v),(v1)
$AE: vfnmsub213ps/vfnmsub213pd Vx,Hx,Wx (66),(v)
$AF: vfnmsub213ss/vfnmsub213sd Vx,Hx,Wx (66),(v),(v1)
$B4: vpmadd52luq Vx,Hx,Wx (66),(ev)
$B5: vpmadd52huq Vx,Hx,Wx (66),(ev)
$B6: vfmaddsub231ps/vfmaddsub231pd Vx,Hx,Wx (66),(v)
$B7: vfmsubadd231ps/vfmsubadd231pd Vx,Hx,Wx (66),(v)
$B8: vfmadd231ps/vfmadd231pd Vx,Hx,Wx (66),(v)
$B9: vfmadd231ss/vfmadd231sd Vx,Hx,Wx (66),(v),(v1)
$BA: vfmsub231ps/vfmsub231pd Vx,Hx,Wx (66),(v)
$BB: vfmsub231ss/vfmsub231sd Vx,Hx,Wx (66),(v),(v1)
$BC: vfnmadd231ps/vfnmadd231pd Vx,Hx,Wx (66),(v)
$BD: vfnmadd231ss/vfnmadd231sd Vx,Hx,Wx (66),(v),(v1)
$BE: vfnmsub231ps/vfnmsub231pd Vx,Hx,Wx (66),(v)
$BF: vfnmsub231ss/vfnmsub231sd Vx,Hx,Wx (66),(v),(v1)
$C4: vpconflictd/vpconflictq Vx,Wx (66),(ev)
$C6: Grp18 (1A)
$C7: Grp19 (1A)
$C8: sha1nexte Vdq,Wdq |vexp2ps/vexp2pd Vx,Wx (66),(ev)
$C9: sha1msg1 Vdq,Wdq
$CA: sha1msg2 Vdq,Wdq |vrcp28ps/vrcp28pd Vx,Wx (66),(ev)
$CB: sha256rnds2 Vdq,Wdq |vrcp28ss/vrcp28sd Vx,Hx,Wx (66),(ev)
$CC: sha256msg1 Vdq,Wdq |vrsqrt28ps/vrsqrt28pd Vx,Wx (66),(ev)
$CD: sha256msg2 Vdq,Wdq |vrsqrt28ss/vrsqrt28sd Vx,Hx,Wx (66),(ev)
$DB: VAESIMC Vdq,Wdq (66),(v1)
$DC: VAESENC Vdq,Hdq,Wdq (66),(v1)
$DD: VAESENCLAST Vdq,Hdq,Wdq (66),(v1)
$DE: VAESDEC Vdq,Hdq,Wdq (66),(v1)
$DF: VAESDECLAST Vdq,Hdq,Wdq (66),(v1)
$F0: MOVBE Gy,My |MOVBE Gw,Mw (66) |CRC32 Gd,Eb (F2) |CRC32 Gd,Eb (66&F2)
$F1: MOVBE My,Gy |MOVBE Mw,Gw (66) |CRC32 Gd,Ey (F2) |CRC32 Gd,Ew (66&F2)
$F2: ANDN Gy,By,Ey (v)
$F3: Grp17 (1A)
$F5: BZHI Gy,Ey,By (v) |PEXT Gy,By,Ey (F3),(v) |PDEP Gy,By,Ey (F2),(v)
$F6: ADCX Gy,Ey (66) |ADOX Gy,Ey (F3) |MULX By,Gy,rDX,Ey (F2),(v)
$F7: BEXTR Gy,Ey,By (v) |SHLX Gy,Ey,By (66),(v) |SARX Gy,Ey,By (F3),(v) |SHRX Gy,Ey,By (F2),(v)
EndTable
Table: Table3A
$00: vpermq Vqq,Wqq,Ib (66),(v)
$01: vpermpd Vqq,Wqq,Ib (66),(v)
$02: vpblendd Vx,Hx,Wx,Ib (66),(v)
$03: valignd/valignq Vx,Hx,Wx,Ib (66),(ev)
$04: vpermilps Vx,Wx,Ib (66),(v)
$05: vpermilpd Vx,Wx,Ib (66),(v)
$06: vperm2f128 Vqq,Hqq,Wqq,Ib (66),(v)
$07: InvalidOpCode 
$08: vroundps Vx,Wx,Ib (66) |vrndscaleps Vx,Wx,Ib (66),(evo)
$09: vroundpd Vx,Wx,Ib (66) |vrndscalepd Vx,Wx,Ib (66),(evo)
$0A: vroundss Vss,Wss,Ib (66),(v1) |vrndscaless Vx,Hx,Wx,Ib (66),(evo)
$0B: vroundsd Vsd,Wsd,Ib (66),(v1) |vrndscalesd Vx,Hx,Wx,Ib (66),(evo)
$0C: vblendps Vx,Hx,Wx,Ib (66)
$0D: vblendpd Vx,Hx,Wx,Ib (66)
$0E: vpblendw Vx,Hx,Wx,Ib (66),(v1)
$0F: palignr Pq,Qq,Ib |vpalignr Vx,Hx,Wx,Ib (66),(v1)
$14: vpextrb Rd/Mb,Vdq,Ib (66),(v1)
$15: vpextrw Rd/Mw,Vdq,Ib (66),(v1)
$16: vpextrd/vpextrq Ey,Vdq,Ib (66),(v1)
$17: vextractps Ed,Vdq,Ib (66),(v1)
$18: vinsertf128 Vqq,Hqq,Wqq,Ib (66),(v) |vinsertf32x4/vinsertf64x2 Vqq,Hqq,Wqq,Ib (66),(evo)
$19: vextractf128 Wdq,Vqq,Ib (66),(v) |vextractf32x4/vextractf64x2 Wdq,Vqq,Ib (66),(evo)
$1A: vinsertf32x8/vinsertf64x4 Vqq,Hqq,Wqq,Ib (66),(ev)
$1B: vextractf32x8/vextractf64x4 Wdq,Vqq,Ib (66),(ev)
$1D: vcvtps2ph Wx,Vx,Ib (66),(v)
$1E: vpcmpud/vpcmpuq Vk,Hd,Wd,Ib (66),(ev)
$1F: vpcmpd/vpcmpq Vk,Hd,Wd,Ib (66),(ev)
$20: vpinsrb Vdq,Hdq,Ry/Mb,Ib (66),(v1)
$21: vinsertps Vdq,Hdq,Udq/Md,Ib (66),(v1)
$22: vpinsrd/vpinsrq Vdq,Hdq,Ey,Ib (66),(v1)
$23: vshuff32x4/vshuff64x2 Vx,Hx,Wx,Ib (66),(ev)
$25: vpternlogd/vpternlogq Vx,Hx,Wx,Ib (66),(ev)
$26: vgetmantps/vgetmantpd Vx,Wx,Ib (66),(ev)
$27: vgetmantss/vgetmantsd Vx,Hx,Wx,Ib (66),(ev)
$30: kshiftrb/kshiftrw Vk,Uk,Ib (66),(v)
$31: kshiftrd/kshiftrq Vk,Uk,Ib (66),(v)
$32: kshiftlb/kshiftlw Vk,Uk,Ib (66),(v)
$33: kshiftld/kshiftlq Vk,Uk,Ib (66),(v)
$38: vinserti128 Vqq,Hqq,Wqq,Ib (66),(v) |vinserti32x4/vinserti64x2 Vqq,Hqq,Wqq,Ib (66),(evo)
$39: vextracti128 Wdq,Vqq,Ib (66),(v) |vextracti32x4/vextracti64x2 Wdq,Vqq,Ib (66),(evo)
$3A: vinserti32x8/vinserti64x4 Vqq,Hqq,Wqq,Ib (66),(ev)
$3B: vextracti32x8/vextracti64x4 Wdq,Vqq,Ib (66),(ev)
$3E: vpcmpub/vpcmpuw Vk,Hk,Wx,Ib (66),(ev)
$3F: vpcmpb/vpcmpw Vk,Hk,Wx,Ib (66),(ev)
$40: vdpps Vx,Hx,Wx,Ib (66)
$41: vdppd Vdq,Hdq,Wdq,Ib (66),(v1)
$42: vmpsadbw Vx,Hx,Wx,Ib (66),(v1) |vdbpsadbw Vx,Hx,Wx,Ib (66),(evo)
$43: vshufi32x4/vshufi64x2 Vx,Hx,Wx,Ib (66),(ev)
$44: vpclmulqdq Vdq,Hdq,Wdq,Ib (66),(v1)
$46: vperm2i128 Vqq,Hqq,Wqq,Ib (66),(v)
$4A: vblendvps Vx,Hx,Wx,Lx (66),(v)
$4B: vblendvpd Vx,Hx,Wx,Lx (66),(v)
$4C: vpblendvb Vx,Hx,Wx,Lx (66),(v1)
$50: vrangeps/vrangepd Vx,Hx,Wx,Ib (66),(ev)
$51: vrangess/vrangesd Vx,Hx,Wx,Ib (66),(ev)
$54: vfixupimmps/vfixupimmpd Vx,Hx,Wx,Ib (66),(ev)
$55: vfixupimmss/vfixupimmsd Vx,Hx,Wx,Ib (66),(ev)
$56: vreduceps/vreducepd Vx,Wx,Ib (66),(ev)
$57: vreducess/vreducesd Vx,Hx,Wx,Ib (66),(ev)
$60: vpcmpestrm Vdq,Wdq,Ib (66),(v1)
$61: vpcmpestri Vdq,Wdq,Ib (66),(v1)
$62: vpcmpistrm Vdq,Wdq,Ib (66),(v1)
$63: vpcmpistri Vdq,Wdq,Ib (66),(v1)
$66: vfpclassps/vfpclasspd Vk,Wx,Ib (66),(ev)
$67: vfpclassss/vfpclasssd Vk,Wx,Ib (66),(ev)
$CC: sha1rnds4 Vdq,Wdq,Ib
$DF: VAESKEYGEN Vdq,Wdq,Ib (66),(v1)
$F0: RORX Gy,Ey,Ib (F2),(v)
EndTable
GrpTable: Grp1
$0: ADD 
$1: OR 
$2: ADC 
$3: SBB 
$4: AND 
$5: SUB 
$6: XOR 
$7: CMP 
EndTable
GrpTable: Grp1A
$0: POP 
EndTable
GrpTable: Grp2
$0: ROL 
$1: ROR 
$2: RCL 
$3: RCR 
$4: SHL 
$5: SHR 
$6: InvalidOpCode 
$7: SAR 
EndTable
GrpTable: Grp3_1
$0: TEST Eb,Ib
$1: InvalidOpCode 
$2: NOT Eb
$3: NEG Eb
$4: MUL AL,Eb
$5: IMUL AL,Eb
$6: DIV AL,Eb
$7: IDIV AL,Eb
EndTable
GrpTable: Grp3_2
$0: TEST Ev,Iz
$1: InvalidOpCode 
$2: NOT Ev
$3: NEG Ev
$4: MUL rAX,Ev
$5: IMUL rAX,Ev
$6: DIV rAX,Ev
$7: IDIV rAX,Ev
EndTable
GrpTable: Grp4
$0: INC Eb
$1: DEC Eb
EndTable
GrpTable: Grp5
$0: INC Ev
$1: DEC Ev
$2: CALL Ev (f64)
$3: CALL Ep
$4: JMP Ev (f64)
$5: JMP Mp
$6: PUSH Ev (d64)
$7: InvalidOpCode 
EndTable
GrpTable: Grp6
$0: SLDT Rv/Mw
$1: STR Rv/Mw
$2: LLDT Ew
$3: LTR Ew
$4: VERR Ew
$5: VERW Ew
EndTable
GrpTable: Grp7
$0: SGDT Ms |VMCALL (001),(11B) |VMLAUNCH (010),(11B) |VMRESUME (011),(11B) |VMXOFF (100),(11B)
$1: SIDT Ms |MONITOR (000),(11B) |MWAIT (001),(11B) |CLAC (010),(11B) |STAC (011),(11B)
$2: LGDT Ms |XGETBV (000),(11B) |XSETBV (001),(11B) |VMFUNC (100),(11B) |XEND (101)(11B) |XTEST (110)(11B)
$3: LIDT Ms
$4: SMSW Mw/Rv
$5: rdpkru (110),(11B) |wrpkru (111),(11B)
$6: LMSW Ew
$7: INVLPG Mb |SWAPGS (o64),(000),(11B) |RDTSCP (001),(11B)
EndTable
GrpTable: Grp8
$4: BT 
$5: BTS 
$6: BTR 
$7: BTC 
EndTable
GrpTable: Grp9
$1: CMPXCHG8B Mq/Mdq
$3: xrstors 
$4: xsavec 
$5: xsaves 
$6: VMPTRLD Mq |VMCLEAR Mq (66) |VMXON Mq (F3) |RDRAND Rv (11B)
$7: VMPTRST Mq |VMPTRST Mq (F3) |RDSEED Rv (11B)
EndTable
GrpTable: Grp10
EndTable
GrpTable: Grp11A
$0: MOV Eb,Ib
$7: XABORT Ib (000),(11B)
EndTable
GrpTable: Grp11B
$0: MOV Eb,Iz
$7: XBEGIN Jz (000),(11B)
EndTable
GrpTable: Grp12
$2: psrlw Nq,Ib (11B) |vpsrlw Hx,Ux,Ib (66),(11B),(v1)
$4: psraw Nq,Ib (11B) |vpsraw Hx,Ux,Ib (66),(11B),(v1)
$6: psllw Nq,Ib (11B) |vpsllw Hx,Ux,Ib (66),(11B),(v1)
EndTable
GrpTable: Grp13
$0: vprord/vprorq Hx,Wx,Ib (66),(ev)
$1: vprold/vprolq Hx,Wx,Ib (66),(ev)
$2: psrld Nq,Ib (11B) |vpsrld Hx,Ux,Ib (66),(11B),(v1)
$4: psrad Nq,Ib (11B) |vpsrad Hx,Ux,Ib (66),(11B),(v1) |vpsrad/vpsraq Hx,Ux,Ib (66),(evo)
$6: pslld Nq,Ib (11B) |vpslld Hx,Ux,Ib (66),(11B),(v1)
EndTable
GrpTable: Grp14
$2: psrlq Nq,Ib (11B) |vpsrlq Hx,Ux,Ib (66),(11B),(v1)
$3: vpsrldq Hx,Ux,Ib (66),(11B),(v1)
$6: psllq Nq,Ib (11B) |vpsllq Hx,Ux,Ib (66),(11B),(v1)
$7: vpslldq Hx,Ux,Ib (66),(11B),(v1)
EndTable
GrpTable: Grp15
$0: fxsave |RDFSBASE Ry (F3),(11B)
$1: fxstor |RDGSBASE Ry (F3),(11B)
$2: vldmxcsr Md (v1) |WRFSBASE Ry (F3),(11B)
$3: vstmxcsr Md (v1) |WRGSBASE Ry (F3),(11B)
$4: XSAVE 
$5: XRSTOR |lfence (11B)
$6: XSAVEOPT |clwb (66) |mfence (11B)
$7: clflush |clflushopt (66) |sfence (11B)
EndTable
GrpTable: Grp16
$0: prefetch NTA
$1: prefetch T0
$2: prefetch T1
$3: prefetch T2
EndTable
GrpTable: Grp17
$1: BLSR By,Ey (v)
$2: BLSMSK By,Ey (v)
$3: BLSI By,Ey (v)
EndTable
GrpTable: Grp18
$1: vgatherpf0dps/vgatherpf0dpd Wx (66),(ev)
$2: vgatherpf1dps/vgatherpf1dpd Wx (66),(ev)
$5: vscatterpf0dps/vscatterpf0dpd Wx (66),(ev)
$6: vscatterpf1dps/vscatterpf1dpd Wx (66),(ev)
EndTable
GrpTable: Grp19
$1: vgatherpf0qps/vgatherpf0qpd Wx (66),(ev)
$2: vgatherpf1qps/vgatherpf1qpd Wx (66),(ev)
$5: vscatterpf0qps/vscatterpf0qpd Wx (66),(ev)
$6: vscatterpf1qps/vscatterpf1qpd Wx (66),(ev)
EndTable
GrpTable: GrpP
$0: PREFETCH 
$1: PREFETCHW 
EndTable
GrpTable: GrpPDLK
$0: MONTMUL 
$1: XSHA1 
$2: XSHA2 
EndTable
GrpTable: GrpRNG
$0: xstore-rng 
$1: xcrypt-ecb 
$2: xcrypt-cbc 
$4: xcrypt-cfb 
$5: xcrypt-ofb 
EndTable
